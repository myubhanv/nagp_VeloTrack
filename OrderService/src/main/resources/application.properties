server.port=${PORT:8040}
spring.application.name=order-service

resilience4j.circuitbreaker.instances.product-service.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.product-service.slidingWindowSize=5
resilience4j.circuitbreaker.instances.product-service.minimumNumberOfCalls=2
resilience4j.circuitbreaker.instances.product-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.product-service.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.product-service.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.product-service.recordExceptions=org.springframework.web.client.HttpServerErrorException, java.lang.Exception

resilience4j.circuitbreaker.instances.product-service.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.product-service.sliding-window-size=5
resilience4j.circuitbreaker.instances.product-service.wait-duration-in-open-state=5000ms

# Amazon MSK broker endpoints (comma-separated)
spring.kafka.bootstrap-servers=b-1.mymskcluster.abcd.c2.kafka.ap-south-1.amazonaws.com:9092,b-2.mymskcluster.abcd.c2.kafka.ap-south-1.amazonaws.com:9092,b-3.mymskcluster.abcd.c2.kafka.ap-south-1.amazonaws.com:9092

# Producer key/value serializers
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Optional (disable type headers if using JSON)
spring.kafka.properties.spring.json.add.type.headers=false